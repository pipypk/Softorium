from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command, StateFilter
import logging
import asyncio

TOKEN = "7661180334:AAERm6nhRtovpK5pfzpsW_q7Q23mGXmZe-k"
ADMIN_ID = 1687585771
admin_list = {ADMIN_ID}
TARGET_CHAT_ID = -1002270604851

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
class ReplyState(StatesGroup):
    waiting_for_reply = State()
    waiting_for_user_id = State()  # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    waiting_for_add_admin_user_id = State() # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    waiting_for_remove_admin_user_id = State() # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    waiting_for_block_user_id = State()  # –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    waiting_for_unblock_user_id = State()  # –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

class ProfileState(StatesGroup):
    waiting_for_nickname = State()  # –î–ª—è –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
    waiting_for_timezone = State()  # –î–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
user_count = 0
user_profiles = {}
message_count = 0
user_list = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
blocked_users = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å ID —á–∞—Ç–∞")]
    ],
    resize_keyboard=True
)

user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")],
        [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")]
    ],
    resize_keyboard=True
)

cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

async def get_user_profile(user_id):
    return user_profiles.get(user_id, {"nickname": None, "timezone": None})

async def save_user_profile(user_id, nickname=None, timezone=None):
    if user_id not in user_profiles:
        user_profiles[user_id] = {"nickname": None, "timezone": None}
    
    if nickname:
        user_profiles[user_id]["nickname"] = nickname
    
    if timezone:
        user_profiles[user_id]["timezone"] = timezone

# –ö–æ–º–∞–Ω–¥–∞ /admin
@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id in admin_list:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    global user_count
    user_count += 1
    user_list.add(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    if message.from_user.id in blocked_users:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    photo_url = "https://i.imgur.com/3qjGlGy.png"  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bot_info = (
        "‚úä–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\nüìå–Ø ‚Äî –±–æ—Ç –°–æ—Ñ—Ç–æ—Ä–∏—É–º\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.üîé\n"
        "üî•–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º!"
    )
    help = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="FAQ", callback_data="faq")],
                [InlineKeyboardButton(text="TG –∫–∞–Ω–∞–ª", url="https://t.me/softoriumpro")]
            ]
        )


    await message.answer_photo(photo_url, caption=bot_info, reply_markup=user_keyboard)
    await message.answer("–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É", reply_markup=help)

@dp.callback_query(F.data.startswith("faq"))
async def change_username(callback: types.CallbackQuery, state: FSMContext):
    photo_url = "https://i.imgur.com/9kzbIpO.png"  # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bot_info = (
        "üîé<b>–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–π?</b>\n"
        " ‚Äî –ö–æ–Ω–µ—á–Ω–æ. –ú—ã –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∏—á—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏. –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ\n"
        "üîé<b>–°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞?</b>\n"
        " ‚Äî –í –æ–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–∞—Ä—ã –º–∏–Ω—É—Ç. –í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –ø–∞—Ä—ã —á–∞—Å–æ–≤\n"
    )



    await callback.message.answer_photo(photo_url, caption=bot_info, reply_markup=user_keyboard)



# –ö–æ–º–∞–Ω–¥–∞ "–ü—Ä–æ—Ñ–∏–ª—å"
@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_profile = await get_user_profile(user_id)

    profile_message = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ü—Å–µ–≤–¥–æ–Ω–∏–º: {user_profile['nickname'] if user_profile['nickname'] else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_profile['timezone'] if user_profile['timezone'] else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
    )

    profile = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º", callback_data="change_username")],
                [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="change_hours")]
            ]
        )

    photo_url = "https://imgur.com/kwPz4k6"
    await message.answer_photo(photo_url, caption=profile_message, reply_markup=user_keyboard)
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=profile)

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º"
@dp.callback_query(F.data.startswith("change_username"))
async def change_username(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º:")
    await state.set_state(ProfileState.waiting_for_nickname)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
@dp.message(StateFilter(ProfileState.waiting_for_nickname))
async def set_nickname(message: types.Message, state: FSMContext):
    new_nickname = message.text.strip()
    
    if new_nickname:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_profile(message.from_user.id, nickname=new_nickname)
        await message.answer(f"–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_nickname}")
    else:
        await message.answer("–ü—Å–µ–≤–¥–æ–Ω–∏–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
@dp.callback_query(F.data.startswith("change_hours"))
async def change_hours(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, UTC+3):")
    await state.set_state(ProfileState.waiting_for_timezone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
@dp.message(StateFilter(ProfileState.waiting_for_timezone))
async def set_timezone(message: types.Message, state: FSMContext):
    new_timezone = message.text.strip()
    
    if new_timezone:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await save_user_profile(message.from_user.id, timezone=new_timezone)
        await message.answer(f"–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_timezone}")
    else:
        await message.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    if message.from_user.id in admin_list:
        stats_message = (
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
        )
        photo_url = "https://imgur.com/NR69JPA"
        await message.answer_photo(photo_url, caption=stats_message, reply_markup=user_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
@dp.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def manage_users(message: types.Message):
    if message.from_user.id in admin_list:
        user_management_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_users")],
                [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_blocked_users")],
                [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="block_user")],
                [InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user")],
                [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")]
            ]
        )
        photo_url = "https://imgur.com/O8cki0w"
        await message.answer_photo(photo_url, reply_markup=user_keyboard)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=user_management_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(F.data == "view_users")
async def view_users(callback: types.CallbackQuery):
    if callback.from_user.id in admin_list:
        users_list_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_id in user_list:
            users_list_text += f"User_{user_id}\n"
        await callback.message.answer(users_list_text)
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(F.data == "view_blocked_users")
async def view_blocked_users(callback: types.CallbackQuery):
    if callback.from_user.id in admin_list:
        if blocked_users:
            blocked_users_text = "–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user_id in blocked_users:
                blocked_users_text += f"User_{user_id}\n"
            await callback.message.answer(blocked_users_text)
        else:
            await callback.message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "delete_user")
async def delete_user(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    # –û–∂–∏–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.current_state().set_state(ReplyState.waiting_for_user_id)

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "block_user")
async def block_user(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

    # –û–∂–∏–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.current_state().set_state(ReplyState.waiting_for_block_user_id)

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "unblock_user")
async def unblock_user(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

    # –û–∂–∏–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.current_state().set_state(ReplyState.waiting_for_unblock_user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.message(StateFilter(ReplyState.waiting_for_user_id))
async def delete_user_by_id(message: types.Message):
    user_id_to_delete = message.text.strip()
    
    if user_id_to_delete.isdigit():
        user_id_to_delete = int(user_id_to_delete)
        if user_id_to_delete in user_list:
            user_list.remove(user_id_to_delete)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await dp.current_state().clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@dp.message(StateFilter(ReplyState.waiting_for_block_user_id))
async def block_user_by_id(message: types.Message):
    user_id_to_block = message.text.strip()

    if user_id_to_block.isdigit():
        user_id_to_block = int(user_id_to_block)
        if user_id_to_block in user_list:
            blocked_users.add(user_id_to_block)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_block} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_block} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await dp.current_state().clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
@dp.message(StateFilter(ReplyState.waiting_for_unblock_user_id))
async def unblock_user_by_id(message: types.Message):
    user_id_to_unblock = message.text.strip()

    if user_id_to_unblock.isdigit():
        user_id_to_unblock = int(user_id_to_unblock)
        if user_id_to_unblock in blocked_users:
            blocked_users.remove(user_id_to_unblock)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_unblock} –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_unblock} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await dp.current_state().clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def add_admin(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_list:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
        await state.set_state(ReplyState.waiting_for_add_admin_user_id)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@dp.message(StateFilter(ReplyState.waiting_for_add_admin_user_id))
async def add_admin_by_id(message: types.Message, state: FSMContext):
    new_admin_id = message.text.strip()

    if new_admin_id.isdigit():
        new_admin_id = int(new_admin_id)
        if new_admin_id not in admin_list:
            admin_list.add(new_admin_id)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω —Å—Ç–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            try:
                await bot.send_message(new_admin_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞"
@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def remove_admin(message: types.Message, state: FSMContext):
    if message.from_user.id in admin_list:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
        await state.set_state(ReplyState.waiting_for_remove_admin_user_id)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@dp.message(StateFilter(ReplyState.waiting_for_remove_admin_user_id))
async def remove_admin_by_id(message: types.Message, state: FSMContext):
    admin_id_to_remove = message.text.strip()

    if admin_id_to_remove.isdigit():
        admin_id_to_remove = int(admin_id_to_remove)
        if admin_id_to_remove in admin_list:
            admin_list.remove(admin_id_to_remove)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id_to_remove} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –µ–≥–æ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            try:
                await bot.send_message(admin_id_to_remove, "–í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id_to_remove} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
@dp.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def list_admins(message: types.Message):
    if message.from_user.id in admin_list:
        if admin_list:
            admins_list_text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            for admin_id in admin_list:
                admins_list_text += f"Admin_{admin_id}\n"
            await message.answer(admins_list_text)
        else:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
@dp.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def contact_support(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    global message_count
    message_count += 1
    
    if message.from_user.id in blocked_users:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    user_profile = await get_user_profile(message.from_user.id)
    nickname = user_profile["nickname"] if user_profile["nickname"] else f"User_{message.from_user.id}"
    
    forward_text = f"<b>{nickname}:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ."
    
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
        ]]
    )

    await bot.send_photo(chat_id=TARGET_CHAT_ID, photo=message.photo[-1].file_id, caption=forward_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
@dp.message(F.video)
async def handle_video(message: types.Message):

    global message_count
    message_count += 1
    
    if message.from_user.id in blocked_users:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    user_profile = await get_user_profile(message.from_user.id)
    nickname = user_profile["nickname"] if user_profile["nickname"] else f"User_{message.from_user.id}"
    
    forward_text = f"<b>{nickname}:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ"
    
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
        ]]
    )

    await bot.send_video(chat_id=TARGET_CHAT_ID, video=message.video.file_id, caption=forward_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ–∞–π–ª–æ–≤)
@dp.message(F.document)
async def handle_document(message: types.Message):

    global message_count
    message_count += 1
    
    if message.from_user.id in blocked_users:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    user_profile = await get_user_profile(message.from_user.id)
    nickname = user_profile["nickname"] if user_profile["nickname"] else f"User_{message.from_user.id}"
    
    forward_text = f"<b>{nickname}:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª."
    
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
        ]]
    )

    await bot.send_document(chat_id=TARGET_CHAT_ID, document=message.document.file_id, caption=forward_text, reply_markup=reply_markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(F.text & ~F.reply_to_message)
async def forward_to_admins(message: types.Message):
    global message_count
    message_count += 1
    
    if message.from_user.id in blocked_users:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    user_profile = await get_user_profile(message.from_user.id)
    nickname = user_profile["nickname"] if user_profile["nickname"] else f"User_{message.from_user.id}"
    
    forward_text = f"<b>{nickname}:</b> {message.text}"
    
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.from_user.id}")
        ]]
    )

    await bot.send_message(chat_id=TARGET_CHAT_ID, text=forward_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query(F.data.startswith("reply_"))
async def reply_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    await state.update_data(user_id=user_id)

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:",
        reply_markup=cancel_keyboard
    )

    await state.set_state(ReplyState.waiting_for_reply)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
@dp.message(ReplyState.waiting_for_reply)
async def reply_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ "–û—Ç–º–µ–Ω–∞"
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞.", reply_markup=admin_keyboard)  # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" —É–±–∏—Ä–∞–µ—Ç—Å—è
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    if user_id:
        try:
            await bot.send_message(user_id, f"<b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n{message.text}", parse_mode=ParseMode.HTML)
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=admin_keyboard)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", reply_markup=admin_keyboard)
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=admin_keyboard)
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
